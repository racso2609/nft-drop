{
  "address": "0x02D8EcDa1ff419756E53d5F6660C19a7217fA522",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dropId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "CreateDrop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSABLE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_prefix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sufix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_hiddenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_maxPerTx",
          "type": "uint256"
        }
      ],
      "name": "createDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        }
      ],
      "name": "defineDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "drops",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "hash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "prefix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sufix",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "hiddenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalNft",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMintPerTx",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dropsBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDrops",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        }
      ],
      "name": "withdrawDrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dropId",
          "type": "uint256"
        }
      ],
      "name": "withdrawOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ffe760973ca5645d8cae4a6e8e2be76f2af526ed18ab1943f4f1cb236e14512",
  "receipt": {
    "to": null,
    "from": "0x1c9458660891A6C6ad27bc9e348B7C285c149014",
    "contractAddress": "0x02D8EcDa1ff419756E53d5F6660C19a7217fA522",
    "transactionIndex": 5,
    "gasUsed": "3028833",
    "logsBloom": "0x000080040000000000000000000000000000000000000000008000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000a0000000000000000000800000000000000000000000000001000401000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000040000000000000000000001000000000000000000000000000000000400000000000001000000000000100000000000020000000000000000000100000000000000000000080000000000000000000000000",
    "blockHash": "0xbff6d77adc62118f2e8461f7a57a8fcae0b3c3fbccd47edea177d26cab668c7f",
    "transactionHash": "0x7ffe760973ca5645d8cae4a6e8e2be76f2af526ed18ab1943f4f1cb236e14512",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 10247297,
        "transactionHash": "0x7ffe760973ca5645d8cae4a6e8e2be76f2af526ed18ab1943f4f1cb236e14512",
        "address": "0x02D8EcDa1ff419756E53d5F6660C19a7217fA522",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xbff6d77adc62118f2e8461f7a57a8fcae0b3c3fbccd47edea177d26cab668c7f"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 10247297,
        "transactionHash": "0x7ffe760973ca5645d8cae4a6e8e2be76f2af526ed18ab1943f4f1cb236e14512",
        "address": "0x02D8EcDa1ff419756E53d5F6660C19a7217fA522",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xbff6d77adc62118f2e8461f7a57a8fcae0b3c3fbccd47edea177d26cab668c7f"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 10247297,
        "transactionHash": "0x7ffe760973ca5645d8cae4a6e8e2be76f2af526ed18ab1943f4f1cb236e14512",
        "address": "0x02D8EcDa1ff419756E53d5F6660C19a7217fA522",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xbff6d77adc62118f2e8461f7a57a8fcae0b3c3fbccd47edea177d26cab668c7f"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 10247297,
        "transactionHash": "0x7ffe760973ca5645d8cae4a6e8e2be76f2af526ed18ab1943f4f1cb236e14512",
        "address": "0x02D8EcDa1ff419756E53d5F6660C19a7217fA522",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014",
          "0x0000000000000000000000001c9458660891a6c6ad27bc9e348b7c285c149014"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xbff6d77adc62118f2e8461f7a57a8fcae0b3c3fbccd47edea177d26cab668c7f"
      }
    ],
    "blockNumber": 10247297,
    "cumulativeGasUsed": "8402612",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "fdb8b0b9e3a25d1975603b72b423f17a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dropId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CreateDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSABLE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sufix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hiddenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"defineDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sufix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"hiddenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMintPerTx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dropsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"withdrawDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dropId\",\"type\":\"uint256\"}],\"name\":\"withdrawOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nft/DropNfts.sol\":\"NftDrop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f16f9737853b988865ab819d1ebf8b5009defe981c75bc9079e0f40ed2a2e57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa2695a4c7b192f34b98a3875dfce54c8c6c4976b898a5598b1ce0355ce2e6c56\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Nft/DropNfts.sol\":{\"content\":\"pragma solidity ^0.8.7;\\nimport \\\"./Nft.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract NftDrop is Nft {\\n\\tusing SafeMath for uint256;\\n\\tuint256 public totalDrops;\\n\\tuint256 constant MINT_PRICE = 0.01 ether;\\n\\tuint256 constant TAX_PORCENTAGE = 10;\\n\\tuint256 public balance;\\n\\n\\n\\tstruct Drop {\\n\\t\\tstring name;\\n\\t\\tuint256 hash;\\n\\t\\taddress owner;\\n\\t\\tuint256 nftId;\\n\\t\\tuint256 maxSupply;\\n\\t\\tstring cid;\\n\\t\\tstring prefix;\\n\\t\\tstring sufix;\\n\\t\\tbool revealed;\\n\\t\\tstring hiddenURI;\\n\\t\\tuint256 totalNft;\\n\\t\\tuint256 maxMintPerTx;\\n\\t}\\n  mapping(uint256=>uint256) public dropsBalance;\\n\\tmapping(uint256 => Drop) public drops;\\n\\n\\tmodifier mintValidator(uint256 _mintAmount, uint256 _dropId) {\\n\\t\\trequire(\\n\\t\\t\\t_mintAmount > 0 && _mintAmount <= drops[_dropId].maxMintPerTx,\\n\\t\\t\\t\\\"Invalid mint amount!\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tdrops[_dropId].totalNft + _mintAmount <= drops[_dropId].maxSupply,\\n\\t\\t\\t\\\"Max supply exceeded!\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\tmodifier onlyDropOwner(uint256 _dropId) {\\n\\t\\trequire(msg.sender == drops[_dropId].owner, \\\"You are not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _baseURI(uint256 _dropId)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn drops[_dropId].prefix;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 _tokenId, uint256 _dropId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(_tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\t\\tif (drops[_dropId].revealed) {\\n\\t\\t\\treturn drops[_dropId].hiddenURI;\\n\\t\\t}\\n\\n\\t\\tstring memory baseURI = _baseURI();\\n\\t\\treturn\\n\\t\\t\\tbytes(baseURI).length > 0\\n\\t\\t\\t\\t? string(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\tbaseURI,\\n\\t\\t\\t\\t\\t\\tdrops[_dropId].cid,\\n\\t\\t\\t\\t\\t\\t_tokenId,\\n\\t\\t\\t\\t\\t\\tdrops[_tokenId].sufix\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t\\t: \\\"\\\";\\n\\t}\\n\\n\\tfunction createDrop(\\n\\t\\tuint256 _maxSupply,\\n\\t\\tstring calldata _name,\\n\\t\\tstring calldata _cid,\\n\\t\\tstring calldata _prefix,\\n\\t\\tstring calldata _sufix,\\n\\t\\tstring calldata _hiddenURI,\\n\\t\\tuint256 _maxPerTx\\n\\t) external whenNotPaused returns (uint256) {\\n\\t\\tDrop memory newDrop;\\n\\t\\tnewDrop.maxSupply = _maxSupply;\\n\\t\\tnewDrop.name = _name;\\n\\t\\tnewDrop.cid = _cid;\\n\\t\\tnewDrop.owner = msg.sender;\\n\\t\\tnewDrop.prefix = _prefix;\\n\\t\\tnewDrop.sufix = _sufix;\\n\\t\\tnewDrop.hiddenURI = _hiddenURI;\\n\\t\\tnewDrop.maxMintPerTx = _maxPerTx;\\n\\t\\tdrops[totalDrops] = newDrop;\\n\\t\\temit CreateDrop(totalDrops, _name);\\n\\n\\t\\ttotalDrops++;\\n\\t\\treturn totalDrops - 1;\\n\\t}\\n\\n\\tfunction mint(uint256 _dropId, uint256 _mintAmount)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\tmintValidator(_mintAmount, _dropId)\\n\\t\\twhenNotPaused\\n\\t{\\n\\t\\trequire(msg.value >= _mintAmount.mul(MINT_PRICE), \\\"Invalid eth amount!\\\");\\n\\n\\t\\tuint256 tax = msg.value.mul(TAX_PORCENTAGE).div(100);\\n\\t\\t_mintLoop(msg.sender, _mintAmount);\\n\\t\\tdrops[_dropId].totalNft += _mintAmount;\\n\\t\\tdropsBalance[_dropId]+= msg.value.sub(tax);\\n\\t\\tbalance += tax;\\n\\t}\\n\\n\\tfunction defineDrop(uint256 _dropId)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\twhenNotPaused\\n\\t\\tonlyDropOwner(_dropId)\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tdrops[_dropId].revealed = true;\\n\\t}\\n\\n\\tfunction withdrawDrop(uint256 _dropId) external onlyDropOwner(_dropId) {\\n\\t\\t(bool os, ) = payable(drops[_dropId].owner).call{\\n\\t\\t\\tvalue: dropsBalance[_dropId]\\n\\t\\t}(\\\"\\\");\\n\\t\\trequire(os);\\n\\t\\tdropsBalance[_dropId]= 0;\\n\\n\\t}\\n\\n\\tfunction withdrawOwner(uint256 _dropId) external onlyOwner {\\n\\t\\t(bool os, ) = payable(owner()).call{ value: balance }(\\\"\\\");\\n\\t\\trequire(os);\\n\\t\\tbalance = 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x42ab10561bebe1e39f3845ffc0f3c1c51abd61423f10eefd0edf6f690c679339\"},\"contracts/Nft/Nft.sol\":{\"content\":\"pragma solidity ^0.8.7;\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport  \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Nft is ERC721Pausable, ERC721Burnable, AccessControl, Ownable {\\n\\tbytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\tbytes32 public constant PAUSABLE_ROLE = keccak256(\\\"PAUSABLE_ROLE\\\");\\n\\n\\tuint256 totalNft;\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"You are not an admin\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyPausable() {\\n\\t\\trequire(hasRole(PAUSABLE_ROLE, msg.sender), \\\"You are not an admin\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAdminAndMinters() {\\n\\t\\trequire(\\n\\t\\t\\thasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\\n\\t\\t\\t\\thasRole(MINTER_ROLE, msg.sender),\\n\\t\\t\\t\\\"You are not an admin or a minter\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tevent CreateDrop(uint256 indexed dropId, string indexed name);\\n\\n\\tconstructor() ERC721(\\\"Racso\\\", \\\"RAC\\\") {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t\\t_setupRole(MINTER_ROLE, msg.sender);\\n\\t\\t_setupRole(PAUSABLE_ROLE, msg.sender);\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride(AccessControl, ERC721)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction pause() external onlyPausable {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() external onlyPausable {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * override(ERC721, ERC721Enumerable, ERC721Pausable)\\n\\t * here you're overriding _beforeTokenTransfer method of\\n\\t * three Base classes namely ERC721, ERC721Enumerable, ERC721Pausable\\n\\t * */\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId\\n\\t) internal override(ERC721, ERC721Pausable) {\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId);\\n\\t}\\n\\n\\tfunction _mintLoop(address _minter, uint256 _mintAmount) internal {\\n\\t\\tfor (uint256 i = 0; i < _mintAmount; i++) {\\n\\t\\t\\ttotalNft++;\\n\\t\\t\\t_safeMint(_minter, totalNft);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xef4edcdd5d581d5a7cdbe869d435f0cb44795d52d9c716059652b7749841836d\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526005815264526163736f60d81b60208083019182528351808501909452600384526252414360e81b9084015281519192916200005a91600091620001f9565b50805162000070906001906020840190620001f9565b50506006805460ff19169055506200008833620000f3565b6200009560003362000145565b620000c17f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000145565b620000ed7f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b5603362000145565b620002dc565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b62000151828262000155565b5050565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff16620001515760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001b53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82805462000207906200029f565b90600052602060002090601f0160209004810192826200022b576000855562000276565b82601f106200024657805160ff191683800117855562000276565b8280016001018555821562000276579182015b828111156200027657825182559160200191906001019062000259565b506200028492915062000288565b5090565b5b8082111562000284576000815560010162000289565b600181811c90821680620002b457607f821691505b60208210811415620002d657634e487b7160e01b600052602260045260246000fd5b50919050565b61330280620002ec6000396000f3fe6080604052600436106102255760003560e01c80636ef98b2111610123578063a22cb465116100ab578063c87b56dd1161006f578063c87b56dd14610663578063d539139314610683578063d547741f146106b7578063e985e9c5146106d7578063f2fde38b1461072057600080fd5b8063a22cb465146105c0578063b69ef8a8146105e0578063b88d4fde146105f6578063b8ef5a3814610616578063c34bfa191461064357600080fd5b80638da5cb5b116100f25780638da5cb5b1461053857806391d148541461055657806392cb829d1461057657806395d89b4114610596578063a217fddf146105ab57600080fd5b80636ef98b21146104ce57806370a08231146104ee578063715018a61461050e5780638456cb591461052357600080fd5b806336568abe116101b157806342966c681161017557806342966c681461042b5780635c975abb1461044b5780635eb39968146104635780636352211e1461049b57806366fc51fe146104bb57600080fd5b806336568abe146103a057806339d19eae146103c05780633ee60bcf146103e05780633f4ba83a146103f657806342842e0e1461040b57600080fd5b80630ffd778e116101f85780630ffd778e146102db5780631b2ef1ca1461031d57806323b872dd14610330578063248a9ca3146103505780632f2ff15d1461038057600080fd5b806301ffc9a71461022a57806306fdde031461025f578063081812fc14610281578063095ea7b3146102b9575b600080fd5b34801561023657600080fd5b5061024a610245366004612bc8565b610740565b60405190151581526020015b60405180910390f35b34801561026b57600080fd5b50610274610751565b6040516102569190612f3c565b34801561028d57600080fd5b506102a161029c366004612b8c565b6107e3565b6040516001600160a01b039091168152602001610256565b3480156102c557600080fd5b506102d96102d4366004612b62565b61087d565b005b3480156102e757600080fd5b5061030f7f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b56081565b604051908152602001610256565b6102d961032b366004612d28565b610993565b34801561033c57600080fd5b506102d961034b366004612a0e565b610b73565b34801561035c57600080fd5b5061030f61036b366004612b8c565b60009081526007602052604090206001015490565b34801561038c57600080fd5b506102d961039b366004612ba5565b610ba5565b3480156103ac57600080fd5b506102d96103bb366004612ba5565b610bcb565b3480156103cc57600080fd5b5061030f6103db366004612c02565b610c49565b3480156103ec57600080fd5b5061030f600a5481565b34801561040257600080fd5b506102d9610f9b565b34801561041757600080fd5b506102d9610426366004612a0e565b611012565b34801561043757600080fd5b506102d9610446366004612b8c565b61102d565b34801561045757600080fd5b5060065460ff1661024a565b34801561046f57600080fd5b5061048361047e366004612b8c565b6110a7565b6040516102569c9b9a99989796959493929190612f4f565b3480156104a757600080fd5b506102a16104b6366004612b8c565b6113bf565b61030f6104c9366004612b8c565b611436565b3480156104da57600080fd5b506102d96104e9366004612b8c565b6114e5565b3480156104fa57600080fd5b5061030f6105093660046129c0565b61158b565b34801561051a57600080fd5b506102d9611612565b34801561052f57600080fd5b506102d9611646565b34801561054457600080fd5b506008546001600160a01b03166102a1565b34801561056257600080fd5b5061024a610571366004612ba5565b6116bb565b34801561058257600080fd5b50610274610591366004612d28565b6116e6565b3480156105a257600080fd5b5061027461185b565b3480156105b757600080fd5b5061030f600081565b3480156105cc57600080fd5b506102d96105db366004612b26565b61186a565b3480156105ec57600080fd5b5061030f600b5481565b34801561060257600080fd5b506102d9610611366004612a4a565b611875565b34801561062257600080fd5b5061030f610631366004612b8c565b600c6020526000908152604090205481565b34801561064f57600080fd5b506102d961065e366004612b8c565b6118ad565b34801561066f57600080fd5b5061027461067e366004612b8c565b61199a565b34801561068f57600080fd5b5061030f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156106c357600080fd5b506102d96106d2366004612ba5565b611a3a565b3480156106e357600080fd5b5061024a6106f23660046129db565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561072c57600080fd5b506102d961073b3660046129c0565b611a60565b600061074b82611af8565b92915050565b606060008054610760906131f4565b80601f016020809104026020016040519081016040528092919081815260200182805461078c906131f4565b80156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108615760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610888826113bf565b9050806001600160a01b0316836001600160a01b031614156108f65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610858565b336001600160a01b0382161480610912575061091281336106f2565b6109845760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610858565b61098e8383611b1d565b505050565b80826000821180156109b657506000818152600d60205260409020600b01548211155b6109f95760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206d696e7420616d6f756e742160601b6044820152606401610858565b6000818152600d602052604090206004810154600a90910154610a1d90849061314f565b1115610a625760405162461bcd60e51b81526020600482015260146024820152734d617820737570706c792065786365656465642160601b6044820152606401610858565b60065460ff1615610a855760405162461bcd60e51b815260040161085890613050565b610a9683662386f26fc10000611b8b565b341015610adb5760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642065746820616d6f756e742160681b6044820152606401610858565b6000610af36064610aed34600a611b8b565b90611b97565b9050610aff3385611ba3565b6000858152600d60205260408120600a018054869290610b2090849061314f565b90915550610b3090503482611be1565b6000868152600c602052604081208054909190610b4e90849061314f565b9250508190555080600b6000828254610b67919061314f565b90915550505050505050565b610b7e335b82611bed565b610b9a5760405162461bcd60e51b8152600401610858906130fe565b61098e838383611ce0565b600082815260076020526040902060010154610bc18133611e87565b61098e8383611eeb565b6001600160a01b0381163314610c3b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610858565b610c458282611f71565b5050565b6000610c5760065460ff1690565b15610c745760405162461bcd60e51b815260040161085890613050565b610ce3604051806101800160405280606081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081526020016000151581526020016060815260200160008152602001600081525090565b608081018e9052604080516020601f8f018190048102820181019092528d8152908e908e9081908401838280828437600092019190915250505090825250604080516020601f8d018190048102820181019092528b8152908c908c908190840183828082843760009201919091525050505060a08201523360408083019190915280516020601f8b01819004810282018101909252898152908a908a908190840183828082843760009201919091525050505060c0820152604080516020601f890181900481028201810190925287815290889088908190840183828082843760009201919091525050505060e0820152604080516020601f870181900481028201810190925285815290869086908190840183828082843760009201829052506101208601949094525050506101608201849052600a548152600d60209081526040909120825180518493610e3d9284929101906128c2565b50602082810151600183015560408301516002830180546001600160a01b0319166001600160a01b03909216919091179055606083015160038301556080830151600483015560a08301518051610e9a92600585019201906128c2565b5060c08201518051610eb69160068401916020909101906128c2565b5060e08201518051610ed29160078401916020909101906128c2565b5061010082015160088201805460ff19169115159190911790556101208201518051610f089160098401916020909101906128c2565b50610140820151600a82015561016090910151600b90910155604051610f31908e908e90612e10565b604051908190038120600a5490917f825e8a6d1236d1d4535d5b501e1ec2d3d868269f45e6a0c678d3d082b5bcef3990600090a3600a8054906000610f758361322f565b91905055506001600a54610f89919061319a565b9e9d5050505050505050505050505050565b610fc57f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560336116bb565b6110085760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71030b236b4b760611b6044820152606401610858565b611010611fd8565b565b61098e83838360405180602001604052806000815250611875565b61103633610b78565b61109b5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610858565b6110a48161206b565b50565b600d602052600090815260409020805481906110c2906131f4565b80601f01602080910402602001604051908101604052809291908181526020018280546110ee906131f4565b801561113b5780601f106111105761010080835404028352916020019161113b565b820191906000526020600020905b81548152906001019060200180831161111e57829003601f168201915b5050506001840154600285015460038601546004870154600588018054979894976001600160a01b0390941696509194509291611177906131f4565b80601f01602080910402602001604051908101604052809291908181526020018280546111a3906131f4565b80156111f05780601f106111c5576101008083540402835291602001916111f0565b820191906000526020600020905b8154815290600101906020018083116111d357829003601f168201915b505050505090806006018054611205906131f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611231906131f4565b801561127e5780601f106112535761010080835404028352916020019161127e565b820191906000526020600020905b81548152906001019060200180831161126157829003601f168201915b505050505090806007018054611293906131f4565b80601f01602080910402602001604051908101604052809291908181526020018280546112bf906131f4565b801561130c5780601f106112e15761010080835404028352916020019161130c565b820191906000526020600020905b8154815290600101906020018083116112ef57829003601f168201915b5050506008840154600985018054949560ff909216949193509150611330906131f4565b80601f016020809104026020016040519081016040528092919081815260200182805461135c906131f4565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b50505050509080600a01549080600b015490508c565b6000818152600260205260408120546001600160a01b03168061074b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610858565b600061144460065460ff1690565b156114615760405162461bcd60e51b815260040161085890613050565b6000828152600d602052604090206002015482906001600160a01b031633146114c45760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610858565b506000918252600d6020526040909120600801805460ff1916600117905590565b6008546001600160a01b0316331461150f5760405162461bcd60e51b81526004016108589061307a565b60006115236008546001600160a01b031690565b6001600160a01b0316600b5460405160006040518083038185875af1925050503d806000811461156f576040519150601f19603f3d011682016040523d82523d6000602084013e611574565b606091505b505090508061158257600080fd5b50506000600b55565b60006001600160a01b0382166115f65760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610858565b506001600160a01b031660009081526003602052604090205490565b6008546001600160a01b0316331461163c5760405162461bcd60e51b81526004016108589061307a565b6110106000612112565b6116707f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560336116bb565b6116b35760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71030b236b4b760611b6044820152606401610858565b611010612164565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000828152600260205260409020546060906001600160a01b031661171d5760405162461bcd60e51b8152600401610858906130af565b6000828152600d602052604090206008015460ff16156117d8576000828152600d602052604090206009018054611753906131f4565b80601f016020809104026020016040519081016040528092919081815260200182805461177f906131f4565b80156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b5050505050905061074b565b60006117ef60408051602081019091526000815290565b9050600081511161180f5760405180602001604052806000815250611853565b6000838152600d60209081526040808320878452928190209051611843938593600590910192899260079091019101612e4f565b6040516020818303038152906040525b949350505050565b606060018054610760906131f4565b610c453383836121bc565b61187f3383611bed565b61189b5760405162461bcd60e51b8152600401610858906130fe565b6118a78484848461228b565b50505050565b6000818152600d602052604090206002015481906001600160a01b031633146119105760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610858565b6000828152600d6020908152604080832060020154600c9092528083205490516001600160a01b03909216918381818185875af1925050503d8060008114611974576040519150601f19603f3d011682016040523d82523d6000602084013e611979565b606091505b505090508061198757600080fd5b50506000908152600c6020526040812055565b6000818152600260205260409020546060906001600160a01b03166119d15760405162461bcd60e51b8152600401610858906130af565b60006119e860408051602081019091526000815290565b90506000815111611a085760405180602001604052806000815250611a33565b80611a12846122be565b604051602001611a23929190612e20565b6040516020818303038152906040525b9392505050565b600082815260076020526040902060010154611a568133611e87565b61098e8383611f71565b6008546001600160a01b03163314611a8a5760405162461bcd60e51b81526004016108589061307a565b6001600160a01b038116611aef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610858565b6110a481612112565b60006001600160e01b03198216637965db0b60e01b148061074b575061074b826123bc565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b52826113bf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611a33828461317b565b6000611a338284613167565b60005b8181101561098e5760098054906000611bbe8361322f565b9190505550611bcf8360095461240c565b80611bd98161322f565b915050611ba6565b6000611a33828461319a565b6000818152600260205260408120546001600160a01b0316611c665760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610858565b6000611c71836113bf565b9050806001600160a01b0316846001600160a01b03161480611cac5750836001600160a01b0316611ca1846107e3565b6001600160a01b0316145b8061185357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611853565b826001600160a01b0316611cf3826113bf565b6001600160a01b031614611d575760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610858565b6001600160a01b038216611db95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610858565b611dc4838383612426565b611dcf600082611b1d565b6001600160a01b0383166000908152600360205260408120805460019290611df890849061319a565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e2690849061314f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611e9182826116bb565b610c4557611ea9816001600160a01b03166014612431565b611eb4836020612431565b604051602001611ec5929190612e8a565b60408051601f198184030181529082905262461bcd60e51b825261085891600401612f3c565b611ef582826116bb565b610c455760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f2d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f7b82826116bb565b15610c455760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60065460ff166120215760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610858565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000612076826113bf565b905061208481600084612426565b61208f600083611b1d565b6001600160a01b03811660009081526003602052604081208054600192906120b890849061319a565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60065460ff16156121875760405162461bcd60e51b815260040161085890613050565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861204e3390565b816001600160a01b0316836001600160a01b0316141561221e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610858565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612296848484611ce0565b6122a2848484846125cd565b6118a75760405162461bcd60e51b815260040161085890612ffe565b6060816122e25750506040805180820190915260018152600360fc1b602082015290565b8160005b811561230c57806122f68161322f565b91506123059050600a83613167565b91506122e6565b60008167ffffffffffffffff811115612327576123276132a0565b6040519080825280601f01601f191660200182016040528015612351576020820181803683370190505b5090505b84156118535761236660018361319a565b9150612373600a8661324a565b61237e90603061314f565b60f81b8183815181106123935761239361328a565b60200101906001600160f81b031916908160001a9053506123b5600a86613167565b9450612355565b60006001600160e01b031982166380ac58cd60e01b14806123ed57506001600160e01b03198216635b5e139f60e01b145b8061074b57506301ffc9a760e01b6001600160e01b031983161461074b565b610c458282604051806020016040528060008152506126da565b61098e83838361270d565b6060600061244083600261317b565b61244b90600261314f565b67ffffffffffffffff811115612463576124636132a0565b6040519080825280601f01601f19166020018201604052801561248d576020820181803683370190505b509050600360fc1b816000815181106124a8576124a861328a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124d7576124d761328a565b60200101906001600160f81b031916908160001a90535060006124fb84600261317b565b61250690600161314f565b90505b600181111561257e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061253a5761253a61328a565b1a60f81b8282815181106125505761255061328a565b60200101906001600160f81b031916908160001a90535060049490941c93612577816131dd565b9050612509565b508315611a335760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610858565b60006001600160a01b0384163b156126cf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612611903390899088908890600401612eff565b602060405180830381600087803b15801561262b57600080fd5b505af192505050801561265b575060408051601f3d908101601f1916820190925261265891810190612be5565b60015b6126b5573d808015612689576040519150601f19603f3d011682016040523d82523d6000602084013e61268e565b606091505b5080516126ad5760405162461bcd60e51b815260040161085890612ffe565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611853565b506001949350505050565b6126e48383612774565b6126f160008484846125cd565b61098e5760405162461bcd60e51b815260040161085890612ffe565b60065460ff161561098e5760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610858565b6001600160a01b0382166127ca5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610858565b6000818152600260205260409020546001600160a01b03161561282f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610858565b61283b60008383612426565b6001600160a01b038216600090815260036020526040812080546001929061286490849061314f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546128ce906131f4565b90600052602060002090601f0160209004810192826128f05760008555612936565b82601f1061290957805160ff1916838001178555612936565b82800160010185558215612936579182015b8281111561293657825182559160200191906001019061291b565b50612942929150612946565b5090565b5b808211156129425760008155600101612947565b80356001600160a01b038116811461297257600080fd5b919050565b60008083601f84011261298957600080fd5b50813567ffffffffffffffff8111156129a157600080fd5b6020830191508360208285010111156129b957600080fd5b9250929050565b6000602082840312156129d257600080fd5b611a338261295b565b600080604083850312156129ee57600080fd5b6129f78361295b565b9150612a056020840161295b565b90509250929050565b600080600060608486031215612a2357600080fd5b612a2c8461295b565b9250612a3a6020850161295b565b9150604084013590509250925092565b60008060008060808587031215612a6057600080fd5b612a698561295b565b9350612a776020860161295b565b925060408501359150606085013567ffffffffffffffff80821115612a9b57600080fd5b818701915087601f830112612aaf57600080fd5b813581811115612ac157612ac16132a0565b604051601f8201601f19908116603f01168101908382118183101715612ae957612ae96132a0565b816040528281528a6020848701011115612b0257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612b3957600080fd5b612b428361295b565b915060208301358015158114612b5757600080fd5b809150509250929050565b60008060408385031215612b7557600080fd5b612b7e8361295b565b946020939093013593505050565b600060208284031215612b9e57600080fd5b5035919050565b60008060408385031215612bb857600080fd5b82359150612a056020840161295b565b600060208284031215612bda57600080fd5b8135611a33816132b6565b600060208284031215612bf757600080fd5b8151611a33816132b6565b60008060008060008060008060008060008060e08d8f031215612c2457600080fd5b8c359b5067ffffffffffffffff60208e01351115612c4157600080fd5b612c518e60208f01358f01612977565b909b50995067ffffffffffffffff60408e01351115612c6f57600080fd5b612c7f8e60408f01358f01612977565b909950975067ffffffffffffffff60608e01351115612c9d57600080fd5b612cad8e60608f01358f01612977565b909750955067ffffffffffffffff60808e01351115612ccb57600080fd5b612cdb8e60808f01358f01612977565b909550935067ffffffffffffffff60a08e01351115612cf957600080fd5b612d098e60a08f01358f01612977565b819450809350505060c08d013590509295989b509295989b509295989b565b60008060408385031215612d3b57600080fd5b50508035926020909101359150565b60008151808452612d628160208601602086016131b1565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680612d9057607f831692505b6020808410821415612db257634e487b7160e01b600052602260045260246000fd5b818015612dc65760018114612dd757612e04565b60ff19861689528489019650612e04565b60008881526020902060005b86811015612dfc5781548b820152908501908301612de3565b505084890196505b50505050505092915050565b8183823760009101908152919050565b60008351612e328184602088016131b1565b835190830190612e468183602088016131b1565b01949350505050565b60008551612e61818460208a016131b1565b612e6d81840187612d76565b9050848152612e7f6020820185612d76565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ec28160178501602088016131b1565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612ef38160288401602088016131b1565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f3290830184612d4a565b9695505050505050565b602081526000611a336020830184612d4a565b61018081526000612f6461018083018f612d4a565b602083018e90526001600160a01b038d166040840152606083018c9052608083018b905282810360a0840152612f9a818b612d4a565b905082810360c0840152612fae818a612d4a565b905082810360e0840152612fc28189612d4a565b8715156101008501529050828103610120840152612fe08187612d4a565b610140840195909552505061016001529a9950505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156131625761316261325e565b500190565b60008261317657613176613274565b500490565b60008160001904831182151516156131955761319561325e565b500290565b6000828210156131ac576131ac61325e565b500390565b60005b838110156131cc5781810151838201526020016131b4565b838111156118a75750506000910152565b6000816131ec576131ec61325e565b506000190190565b600181811c9082168061320857607f821691505b6020821081141561322957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132435761324361325e565b5060010190565b60008261325957613259613274565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146110a457600080fdfea26469706673582212209535fedae99e22ab4dcfd7523bc3c1e4e27a266b9af3c75aace94fb8d0ee85d164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c80636ef98b2111610123578063a22cb465116100ab578063c87b56dd1161006f578063c87b56dd14610663578063d539139314610683578063d547741f146106b7578063e985e9c5146106d7578063f2fde38b1461072057600080fd5b8063a22cb465146105c0578063b69ef8a8146105e0578063b88d4fde146105f6578063b8ef5a3814610616578063c34bfa191461064357600080fd5b80638da5cb5b116100f25780638da5cb5b1461053857806391d148541461055657806392cb829d1461057657806395d89b4114610596578063a217fddf146105ab57600080fd5b80636ef98b21146104ce57806370a08231146104ee578063715018a61461050e5780638456cb591461052357600080fd5b806336568abe116101b157806342966c681161017557806342966c681461042b5780635c975abb1461044b5780635eb39968146104635780636352211e1461049b57806366fc51fe146104bb57600080fd5b806336568abe146103a057806339d19eae146103c05780633ee60bcf146103e05780633f4ba83a146103f657806342842e0e1461040b57600080fd5b80630ffd778e116101f85780630ffd778e146102db5780631b2ef1ca1461031d57806323b872dd14610330578063248a9ca3146103505780632f2ff15d1461038057600080fd5b806301ffc9a71461022a57806306fdde031461025f578063081812fc14610281578063095ea7b3146102b9575b600080fd5b34801561023657600080fd5b5061024a610245366004612bc8565b610740565b60405190151581526020015b60405180910390f35b34801561026b57600080fd5b50610274610751565b6040516102569190612f3c565b34801561028d57600080fd5b506102a161029c366004612b8c565b6107e3565b6040516001600160a01b039091168152602001610256565b3480156102c557600080fd5b506102d96102d4366004612b62565b61087d565b005b3480156102e757600080fd5b5061030f7f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b56081565b604051908152602001610256565b6102d961032b366004612d28565b610993565b34801561033c57600080fd5b506102d961034b366004612a0e565b610b73565b34801561035c57600080fd5b5061030f61036b366004612b8c565b60009081526007602052604090206001015490565b34801561038c57600080fd5b506102d961039b366004612ba5565b610ba5565b3480156103ac57600080fd5b506102d96103bb366004612ba5565b610bcb565b3480156103cc57600080fd5b5061030f6103db366004612c02565b610c49565b3480156103ec57600080fd5b5061030f600a5481565b34801561040257600080fd5b506102d9610f9b565b34801561041757600080fd5b506102d9610426366004612a0e565b611012565b34801561043757600080fd5b506102d9610446366004612b8c565b61102d565b34801561045757600080fd5b5060065460ff1661024a565b34801561046f57600080fd5b5061048361047e366004612b8c565b6110a7565b6040516102569c9b9a99989796959493929190612f4f565b3480156104a757600080fd5b506102a16104b6366004612b8c565b6113bf565b61030f6104c9366004612b8c565b611436565b3480156104da57600080fd5b506102d96104e9366004612b8c565b6114e5565b3480156104fa57600080fd5b5061030f6105093660046129c0565b61158b565b34801561051a57600080fd5b506102d9611612565b34801561052f57600080fd5b506102d9611646565b34801561054457600080fd5b506008546001600160a01b03166102a1565b34801561056257600080fd5b5061024a610571366004612ba5565b6116bb565b34801561058257600080fd5b50610274610591366004612d28565b6116e6565b3480156105a257600080fd5b5061027461185b565b3480156105b757600080fd5b5061030f600081565b3480156105cc57600080fd5b506102d96105db366004612b26565b61186a565b3480156105ec57600080fd5b5061030f600b5481565b34801561060257600080fd5b506102d9610611366004612a4a565b611875565b34801561062257600080fd5b5061030f610631366004612b8c565b600c6020526000908152604090205481565b34801561064f57600080fd5b506102d961065e366004612b8c565b6118ad565b34801561066f57600080fd5b5061027461067e366004612b8c565b61199a565b34801561068f57600080fd5b5061030f7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156106c357600080fd5b506102d96106d2366004612ba5565b611a3a565b3480156106e357600080fd5b5061024a6106f23660046129db565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561072c57600080fd5b506102d961073b3660046129c0565b611a60565b600061074b82611af8565b92915050565b606060008054610760906131f4565b80601f016020809104026020016040519081016040528092919081815260200182805461078c906131f4565b80156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108615760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610888826113bf565b9050806001600160a01b0316836001600160a01b031614156108f65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610858565b336001600160a01b0382161480610912575061091281336106f2565b6109845760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610858565b61098e8383611b1d565b505050565b80826000821180156109b657506000818152600d60205260409020600b01548211155b6109f95760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206d696e7420616d6f756e742160601b6044820152606401610858565b6000818152600d602052604090206004810154600a90910154610a1d90849061314f565b1115610a625760405162461bcd60e51b81526020600482015260146024820152734d617820737570706c792065786365656465642160601b6044820152606401610858565b60065460ff1615610a855760405162461bcd60e51b815260040161085890613050565b610a9683662386f26fc10000611b8b565b341015610adb5760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642065746820616d6f756e742160681b6044820152606401610858565b6000610af36064610aed34600a611b8b565b90611b97565b9050610aff3385611ba3565b6000858152600d60205260408120600a018054869290610b2090849061314f565b90915550610b3090503482611be1565b6000868152600c602052604081208054909190610b4e90849061314f565b9250508190555080600b6000828254610b67919061314f565b90915550505050505050565b610b7e335b82611bed565b610b9a5760405162461bcd60e51b8152600401610858906130fe565b61098e838383611ce0565b600082815260076020526040902060010154610bc18133611e87565b61098e8383611eeb565b6001600160a01b0381163314610c3b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610858565b610c458282611f71565b5050565b6000610c5760065460ff1690565b15610c745760405162461bcd60e51b815260040161085890613050565b610ce3604051806101800160405280606081526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016060815260200160608152602001606081526020016000151581526020016060815260200160008152602001600081525090565b608081018e9052604080516020601f8f018190048102820181019092528d8152908e908e9081908401838280828437600092019190915250505090825250604080516020601f8d018190048102820181019092528b8152908c908c908190840183828082843760009201919091525050505060a08201523360408083019190915280516020601f8b01819004810282018101909252898152908a908a908190840183828082843760009201919091525050505060c0820152604080516020601f890181900481028201810190925287815290889088908190840183828082843760009201919091525050505060e0820152604080516020601f870181900481028201810190925285815290869086908190840183828082843760009201829052506101208601949094525050506101608201849052600a548152600d60209081526040909120825180518493610e3d9284929101906128c2565b50602082810151600183015560408301516002830180546001600160a01b0319166001600160a01b03909216919091179055606083015160038301556080830151600483015560a08301518051610e9a92600585019201906128c2565b5060c08201518051610eb69160068401916020909101906128c2565b5060e08201518051610ed29160078401916020909101906128c2565b5061010082015160088201805460ff19169115159190911790556101208201518051610f089160098401916020909101906128c2565b50610140820151600a82015561016090910151600b90910155604051610f31908e908e90612e10565b604051908190038120600a5490917f825e8a6d1236d1d4535d5b501e1ec2d3d868269f45e6a0c678d3d082b5bcef3990600090a3600a8054906000610f758361322f565b91905055506001600a54610f89919061319a565b9e9d5050505050505050505050505050565b610fc57f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560336116bb565b6110085760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71030b236b4b760611b6044820152606401610858565b611010611fd8565b565b61098e83838360405180602001604052806000815250611875565b61103633610b78565b61109b5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610858565b6110a48161206b565b50565b600d602052600090815260409020805481906110c2906131f4565b80601f01602080910402602001604051908101604052809291908181526020018280546110ee906131f4565b801561113b5780601f106111105761010080835404028352916020019161113b565b820191906000526020600020905b81548152906001019060200180831161111e57829003601f168201915b5050506001840154600285015460038601546004870154600588018054979894976001600160a01b0390941696509194509291611177906131f4565b80601f01602080910402602001604051908101604052809291908181526020018280546111a3906131f4565b80156111f05780601f106111c5576101008083540402835291602001916111f0565b820191906000526020600020905b8154815290600101906020018083116111d357829003601f168201915b505050505090806006018054611205906131f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611231906131f4565b801561127e5780601f106112535761010080835404028352916020019161127e565b820191906000526020600020905b81548152906001019060200180831161126157829003601f168201915b505050505090806007018054611293906131f4565b80601f01602080910402602001604051908101604052809291908181526020018280546112bf906131f4565b801561130c5780601f106112e15761010080835404028352916020019161130c565b820191906000526020600020905b8154815290600101906020018083116112ef57829003601f168201915b5050506008840154600985018054949560ff909216949193509150611330906131f4565b80601f016020809104026020016040519081016040528092919081815260200182805461135c906131f4565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b50505050509080600a01549080600b015490508c565b6000818152600260205260408120546001600160a01b03168061074b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610858565b600061144460065460ff1690565b156114615760405162461bcd60e51b815260040161085890613050565b6000828152600d602052604090206002015482906001600160a01b031633146114c45760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610858565b506000918252600d6020526040909120600801805460ff1916600117905590565b6008546001600160a01b0316331461150f5760405162461bcd60e51b81526004016108589061307a565b60006115236008546001600160a01b031690565b6001600160a01b0316600b5460405160006040518083038185875af1925050503d806000811461156f576040519150601f19603f3d011682016040523d82523d6000602084013e611574565b606091505b505090508061158257600080fd5b50506000600b55565b60006001600160a01b0382166115f65760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610858565b506001600160a01b031660009081526003602052604090205490565b6008546001600160a01b0316331461163c5760405162461bcd60e51b81526004016108589061307a565b6110106000612112565b6116707f09b6fca8f5f3ab2900d9586d1d15872611c1bd42b268b973ad886d4f2646b560336116bb565b6116b35760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71030b236b4b760611b6044820152606401610858565b611010612164565b60009182526007602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000828152600260205260409020546060906001600160a01b031661171d5760405162461bcd60e51b8152600401610858906130af565b6000828152600d602052604090206008015460ff16156117d8576000828152600d602052604090206009018054611753906131f4565b80601f016020809104026020016040519081016040528092919081815260200182805461177f906131f4565b80156117cc5780601f106117a1576101008083540402835291602001916117cc565b820191906000526020600020905b8154815290600101906020018083116117af57829003601f168201915b5050505050905061074b565b60006117ef60408051602081019091526000815290565b9050600081511161180f5760405180602001604052806000815250611853565b6000838152600d60209081526040808320878452928190209051611843938593600590910192899260079091019101612e4f565b6040516020818303038152906040525b949350505050565b606060018054610760906131f4565b610c453383836121bc565b61187f3383611bed565b61189b5760405162461bcd60e51b8152600401610858906130fe565b6118a78484848461228b565b50505050565b6000818152600d602052604090206002015481906001600160a01b031633146119105760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610858565b6000828152600d6020908152604080832060020154600c9092528083205490516001600160a01b03909216918381818185875af1925050503d8060008114611974576040519150601f19603f3d011682016040523d82523d6000602084013e611979565b606091505b505090508061198757600080fd5b50506000908152600c6020526040812055565b6000818152600260205260409020546060906001600160a01b03166119d15760405162461bcd60e51b8152600401610858906130af565b60006119e860408051602081019091526000815290565b90506000815111611a085760405180602001604052806000815250611a33565b80611a12846122be565b604051602001611a23929190612e20565b6040516020818303038152906040525b9392505050565b600082815260076020526040902060010154611a568133611e87565b61098e8383611f71565b6008546001600160a01b03163314611a8a5760405162461bcd60e51b81526004016108589061307a565b6001600160a01b038116611aef5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610858565b6110a481612112565b60006001600160e01b03198216637965db0b60e01b148061074b575061074b826123bc565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b52826113bf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611a33828461317b565b6000611a338284613167565b60005b8181101561098e5760098054906000611bbe8361322f565b9190505550611bcf8360095461240c565b80611bd98161322f565b915050611ba6565b6000611a33828461319a565b6000818152600260205260408120546001600160a01b0316611c665760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610858565b6000611c71836113bf565b9050806001600160a01b0316846001600160a01b03161480611cac5750836001600160a01b0316611ca1846107e3565b6001600160a01b0316145b8061185357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611853565b826001600160a01b0316611cf3826113bf565b6001600160a01b031614611d575760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610858565b6001600160a01b038216611db95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610858565b611dc4838383612426565b611dcf600082611b1d565b6001600160a01b0383166000908152600360205260408120805460019290611df890849061319a565b90915550506001600160a01b0382166000908152600360205260408120805460019290611e2690849061314f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611e9182826116bb565b610c4557611ea9816001600160a01b03166014612431565b611eb4836020612431565b604051602001611ec5929190612e8a565b60408051601f198184030181529082905262461bcd60e51b825261085891600401612f3c565b611ef582826116bb565b610c455760008281526007602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611f2d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611f7b82826116bb565b15610c455760008281526007602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60065460ff166120215760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610858565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000612076826113bf565b905061208481600084612426565b61208f600083611b1d565b6001600160a01b03811660009081526003602052604081208054600192906120b890849061319a565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60065460ff16156121875760405162461bcd60e51b815260040161085890613050565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861204e3390565b816001600160a01b0316836001600160a01b0316141561221e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610858565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612296848484611ce0565b6122a2848484846125cd565b6118a75760405162461bcd60e51b815260040161085890612ffe565b6060816122e25750506040805180820190915260018152600360fc1b602082015290565b8160005b811561230c57806122f68161322f565b91506123059050600a83613167565b91506122e6565b60008167ffffffffffffffff811115612327576123276132a0565b6040519080825280601f01601f191660200182016040528015612351576020820181803683370190505b5090505b84156118535761236660018361319a565b9150612373600a8661324a565b61237e90603061314f565b60f81b8183815181106123935761239361328a565b60200101906001600160f81b031916908160001a9053506123b5600a86613167565b9450612355565b60006001600160e01b031982166380ac58cd60e01b14806123ed57506001600160e01b03198216635b5e139f60e01b145b8061074b57506301ffc9a760e01b6001600160e01b031983161461074b565b610c458282604051806020016040528060008152506126da565b61098e83838361270d565b6060600061244083600261317b565b61244b90600261314f565b67ffffffffffffffff811115612463576124636132a0565b6040519080825280601f01601f19166020018201604052801561248d576020820181803683370190505b509050600360fc1b816000815181106124a8576124a861328a565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124d7576124d761328a565b60200101906001600160f81b031916908160001a90535060006124fb84600261317b565b61250690600161314f565b90505b600181111561257e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061253a5761253a61328a565b1a60f81b8282815181106125505761255061328a565b60200101906001600160f81b031916908160001a90535060049490941c93612577816131dd565b9050612509565b508315611a335760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610858565b60006001600160a01b0384163b156126cf57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612611903390899088908890600401612eff565b602060405180830381600087803b15801561262b57600080fd5b505af192505050801561265b575060408051601f3d908101601f1916820190925261265891810190612be5565b60015b6126b5573d808015612689576040519150601f19603f3d011682016040523d82523d6000602084013e61268e565b606091505b5080516126ad5760405162461bcd60e51b815260040161085890612ffe565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611853565b506001949350505050565b6126e48383612774565b6126f160008484846125cd565b61098e5760405162461bcd60e51b815260040161085890612ffe565b60065460ff161561098e5760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b6064820152608401610858565b6001600160a01b0382166127ca5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610858565b6000818152600260205260409020546001600160a01b03161561282f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610858565b61283b60008383612426565b6001600160a01b038216600090815260036020526040812080546001929061286490849061314f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546128ce906131f4565b90600052602060002090601f0160209004810192826128f05760008555612936565b82601f1061290957805160ff1916838001178555612936565b82800160010185558215612936579182015b8281111561293657825182559160200191906001019061291b565b50612942929150612946565b5090565b5b808211156129425760008155600101612947565b80356001600160a01b038116811461297257600080fd5b919050565b60008083601f84011261298957600080fd5b50813567ffffffffffffffff8111156129a157600080fd5b6020830191508360208285010111156129b957600080fd5b9250929050565b6000602082840312156129d257600080fd5b611a338261295b565b600080604083850312156129ee57600080fd5b6129f78361295b565b9150612a056020840161295b565b90509250929050565b600080600060608486031215612a2357600080fd5b612a2c8461295b565b9250612a3a6020850161295b565b9150604084013590509250925092565b60008060008060808587031215612a6057600080fd5b612a698561295b565b9350612a776020860161295b565b925060408501359150606085013567ffffffffffffffff80821115612a9b57600080fd5b818701915087601f830112612aaf57600080fd5b813581811115612ac157612ac16132a0565b604051601f8201601f19908116603f01168101908382118183101715612ae957612ae96132a0565b816040528281528a6020848701011115612b0257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612b3957600080fd5b612b428361295b565b915060208301358015158114612b5757600080fd5b809150509250929050565b60008060408385031215612b7557600080fd5b612b7e8361295b565b946020939093013593505050565b600060208284031215612b9e57600080fd5b5035919050565b60008060408385031215612bb857600080fd5b82359150612a056020840161295b565b600060208284031215612bda57600080fd5b8135611a33816132b6565b600060208284031215612bf757600080fd5b8151611a33816132b6565b60008060008060008060008060008060008060e08d8f031215612c2457600080fd5b8c359b5067ffffffffffffffff60208e01351115612c4157600080fd5b612c518e60208f01358f01612977565b909b50995067ffffffffffffffff60408e01351115612c6f57600080fd5b612c7f8e60408f01358f01612977565b909950975067ffffffffffffffff60608e01351115612c9d57600080fd5b612cad8e60608f01358f01612977565b909750955067ffffffffffffffff60808e01351115612ccb57600080fd5b612cdb8e60808f01358f01612977565b909550935067ffffffffffffffff60a08e01351115612cf957600080fd5b612d098e60a08f01358f01612977565b819450809350505060c08d013590509295989b509295989b509295989b565b60008060408385031215612d3b57600080fd5b50508035926020909101359150565b60008151808452612d628160208601602086016131b1565b601f01601f19169290920160200192915050565b8054600090600181811c9080831680612d9057607f831692505b6020808410821415612db257634e487b7160e01b600052602260045260246000fd5b818015612dc65760018114612dd757612e04565b60ff19861689528489019650612e04565b60008881526020902060005b86811015612dfc5781548b820152908501908301612de3565b505084890196505b50505050505092915050565b8183823760009101908152919050565b60008351612e328184602088016131b1565b835190830190612e468183602088016131b1565b01949350505050565b60008551612e61818460208a016131b1565b612e6d81840187612d76565b9050848152612e7f6020820185612d76565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612ec28160178501602088016131b1565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612ef38160288401602088016131b1565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f3290830184612d4a565b9695505050505050565b602081526000611a336020830184612d4a565b61018081526000612f6461018083018f612d4a565b602083018e90526001600160a01b038d166040840152606083018c9052608083018b905282810360a0840152612f9a818b612d4a565b905082810360c0840152612fae818a612d4a565b905082810360e0840152612fc28189612d4a565b8715156101008501529050828103610120840152612fe08187612d4a565b610140840195909552505061016001529a9950505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156131625761316261325e565b500190565b60008261317657613176613274565b500490565b60008160001904831182151516156131955761319561325e565b500290565b6000828210156131ac576131ac61325e565b500390565b60005b838110156131cc5781810151838201526020016131b4565b838111156118a75750506000910152565b6000816131ec576131ec61325e565b506000190190565b600181811c9082168061320857607f821691505b6020821081141561322957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132435761324361325e565b5060010190565b60008261325957613259613274565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146110a457600080fdfea26469706673582212209535fedae99e22ab4dcfd7523bc3c1e4e27a266b9af3c75aace94fb8d0ee85d164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1295,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1297,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1301,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1305,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1309,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1315,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 504,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_roles",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 389,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3678,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "totalNft",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3242,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "totalDrops",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3250,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "balance",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3279,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "dropsBalance",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3284,
        "contract": "contracts/Nft/DropNfts.sol:NftDrop",
        "label": "drops",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Drop)3275_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Drop)3275_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftDrop.Drop)",
        "numberOfBytes": "32",
        "value": "t_struct(Drop)3275_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Drop)3275_storage": {
        "encoding": "inplace",
        "label": "struct NftDrop.Drop",
        "members": [
          {
            "astId": 3252,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3254,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "hash",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3256,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3258,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "nftId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3260,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "maxSupply",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3262,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "cid",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3264,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "prefix",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3266,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "sufix",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 3268,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "revealed",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 3270,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "hiddenURI",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 3272,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "totalNft",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 3274,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "maxMintPerTx",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Nft/DropNfts.sol:NftDrop",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}